To ensure your automation system is functioning smoothly and the Google Sheets integration works as expected, let’s break down the necessary updates and steps:

1. Google Sheets Connection Testing (sheets.py)

Objective: Ensure that the system can successfully connect to Google Sheets, read from it, and write to it as needed.

Add a Function to Test Google Sheets Connection:

We’ll add a helper function in the sheets.py file to test the connection to Google Sheets.

import gspread
from google.oauth2.service_account import Credentials

def test_google_sheets_connection():
    try:
        scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        credentials = Credentials.from_service_account_file(
            "ai-outreach-sheets-access-24fe56ec7689.json", scopes=scopes
        )
        client = gspread.authorize(credentials)
        # Try opening a sheet
        sheet = client.open_by_url(
            "https://docs.google.com/spreadsheets/d/1WbdwNIdbvuCPG_Lh3-mtPCPO8ddLR5RIatcdeq29EPs/edit"
        )
        worksheet = sheet.get_worksheet(0)
        print("✅ Google Sheets connection successful!")
        return True
    except Exception as e:
        print(f"❌ Error connecting to Google Sheets: {e}")
        return False

	•	This function will attempt to connect to the Google Sheets API using credentials stored in the JSON file and will print a message if the connection is successful or fails.

Testing Sheets Integration

Now, call this function in main.py to verify that Google Sheets is accessible during the system’s startup:

from sheets import test_google_sheets_connection

# Test Google Sheets connection
if not test_google_sheets_connection():
    raise SystemExit("❌ Unable to connect to Google Sheets. Exiting the program.")

2. System Health Monitoring (main.py)

Objective: Add an endpoint to monitor the health of the automation system, ensuring both the email campaign and email responder are working.

Add a /system-health Endpoint:

We will add an endpoint to check the health of the entire system. It will return a success status if everything is operational.

@app.get("/system-health")
def system_health():
    try:
        # Test the Google Sheets connection
        google_sheets_status = test_google_sheets_connection()

        # Check if the responder and campaign systems are running smoothly
        # You can add additional checks based on your needs
        if google_sheets_status:
            return {"status": "success", "message": "System is running properly."}
        else:
            return {"status": "failure", "message": "Google Sheets connection issue."}
    except Exception as e:
        return {"status": "failure", "message": f"System health check failed: {str(e)}"}

	•	This endpoint will give a JSON response indicating whether the system is running properly and whether it can connect to Google Sheets.

3. Enhanced Campaign Logging (main.py)

Objective: Add logging functionality to track the campaign process, making it easier to debug and monitor.

Add Logging for Campaign Process:

You can use Python’s built-in logging module to add detailed logs for the email campaign.

import logging

# Set up basic logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def log_campaign_activity(message):
    logger.info(message)

@app.get("/run_campaign")
def run_campaign():
    try:
        logger.info("Running campaign...")

        # Example: log the number of emails processed
        emails_processed = 0
        qualified_leads = get_qualified_leads()

        for website in qualified_leads:
            logger.info(f"Processing website: {website}")
            scrape_resp = scrape_website(ScrapeRequest(url=website))

            if 'error' in scrape_resp or not scrape_resp.get('emails'):
                continue

            summarize_resp = summarize(SummarizeRequest(text=scrape_resp['text']))
            if 'error' in summarize_resp:
                continue

            generate_resp = generate_email(
                GenerateEmailRequest(business_name=website, summary=summarize_resp['summary'])
            )
            if 'error' in generate_resp:
                continue

            # Log the email generation process
            logger.info(f"Generated email for {website}")
            save_generated_email(website, generate_resp['email'])

            emails_processed += 1

        logger.info(f"Campaign complete. {emails_processed} emails processed.")
        send_daily_report(emails_processed)

        return {"status": "Campaign complete."}
    except Exception as e:
        logger.error(f"Error running campaign: {str(e)}")
        return {"error": str(e)}

	•	Logging Campaign Progress: This logging ensures that each step of the campaign is tracked, including the website being processed and the emails generated.
	•	Error Logging: Any errors that occur will be logged for debugging purposes.

4. Testing the System

To test the full system, you can:
	1.	Test Google Sheets Connection: Visit the /system-health endpoint to ensure the connection to Google Sheets is working properly.
	2.	Run the Campaign: Trigger the /run_campaign endpoint to see if emails are processed correctly, with the logs being outputted to the console for you to monitor the campaign’s progress.
	3.	Check Logs: Monitor logs on the system (through the console or a log file) to verify all stages of the campaign are being logged.

Summary of Changes
	•	Google Sheets Testing: Added a function to test the Google Sheets connection in sheets.py, which is called during the startup in main.py.
	•	System Health Monitoring: Added a /system-health endpoint to verify the system’s overall status, including Google Sheets connectivity.
	•	Enhanced Logging: Included logging for email campaigns in main.py to provide detailed progress and error tracking.

⸻

By following these steps, you can verify the functionality of the automation system, monitor its health, and ensure proper logging for debugging. Let me know when you’d like to proceed with these changes, or if you’d like to make further adjustments.